/*
miRNApipe Main Config file
*/

params.help = false

// output directory
params.outdir="output"

// How many multimappings to alloew for a read
params.n_multimap = 20

// Allow to set a name for the run
params.run_name = false

// Adapter sequence file
params.adapters = false

// reads are single-end?
params.singleEnd = false

// Send Email reports?
params.email = false

// Skip MultiQC report
params.skip_multiqc = false


/*
Specify the relevant config based on execution context
*/
profiles {
	standard {
		includeConfig 'conf/base.config'
		includeConfig 'conf/rzcluster.config'
		includeConfig 'conf/conda.config'
	}
	singularity_ikmb {
		includeConfig 'conf/base.config'
		includeConfig 'conf/rzcluster.config'
		includeConfig 'conf/singularity.config'
		includeConfig 'conf/singularity_rzcluster.config'
	}
}

timeline {
	enabled = true
	file = "${params.outdir}/pipeline_info/miRNApipe_timeline.html"
}
report {
	enabled = true
	file = "${params.outdir}/pipeline_info/miRNApipe_report.html"
}
trace {
	enabled = true
	file = "${params.outdir}/pipeline_info/miRNApipe_trace.txt"
}
dag {
	enabled = true
	file = "${params.outdir}/pipeline_info/miRNApipe_dag.svg"
}


manifest {
	homePage = 'https://github.com/marchoeppner/miRNApipe.git'
	description = 'This pipeline aligns miRNA reads and quantifies expression'
	mainScript = 'main.nf'
	version = '1.0'
	nextflowVersion = '0.18.01'
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
